%{
#include <iostream>
using namespace std;

int yyerror(const char*);
extern int yylex();
extern int poz[];
%}
%define parse.error verbose
%union {
  int ival;
  float fval;
  double dval;
  char* str;
}

%start START
%token<ival> INTNUMBER
%token<dval> DOUBLENUMBER

%token PLUS
%token MINUS
%token MULTIPLY
%token DIVIDE
%token ASSIGNMENT

%token L_BOX
%token R_BOX
%token L_ROUND
%token R_ROUND
%token L_CURLY
%token R_CURLY
%token L_ANGLE
%token R_ANGLE

%token EQUAL
%token NOT_EQUAL
%token AND
%token OR
%token NOT

%token END

%token READ
%token PRINT

%token IF
%token ELSE
%token WHILE

%token INTEGER_TYPE
%token DOUBLE_TYPE
%token VARIABLE_ID
%token GLOBAL_MODIFIER
%token PIPE
%token DOUBLECOMMA
%token TILDA

%token <ival> INT
%token <fval> FLOAT
%token <dval> DOUBLE
%token <str> STR

%left  PLUS MINUS 
%left  MULTIPLY DIVIDE

%left  OR AND


%type<dval> EXPRESSION

%%

START: 
	PROG 
	| // empty
;

PROG:
	  COMMAND END
	| PROG  COMMAND END
	| IFBLOCK
	| WHILEBLOCK	
	| PROG IFBLOCK
	| PROG WHILEBLOCK
	| error	
;

COMMAND:  EXPRESSION { cout<<$1;}
		| DECLARATION
		| VARIABLE_ASSIGNMENT 
		| READ_VARIABLE
		| PRINT_VARIABLE
;

IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG R_ANGLE
		|IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG L_ANGLE R_ANGLE   PROG R_ANGLE
;

WHILEBLOCK:   WHILE L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG R_ANGLE			
;


EQUALITY: EXPRESSION EQUAL EXPRESSION
;
NOTEQUALITY: EXPRESSION NOT_EQUAL EXPRESSION
;

SMALLER: EXPRESSION L_ANGLE EXPRESSION
;
BIGGER: EXPRESSION R_ANGLE EXPRESSION
;

BOOLEXPRESSION: EQUALITY 
		| NOTEQUALITY 
		| SMALLER
		| BIGGER
		| BOOLEXPRESSION OR BOOLEXPRESSION
		| BOOLEXPRESSION AND BOOLEXPRESSION
		| L_ROUND BOOLEXPRESSION R_ROUND
		| error
;


EXPRESSION: VARIABLE_EVAL {$$ = 0;}	
	| INTNUMBER {$$ = $1;}	
	| DOUBLENUMBER {$$ = $1;}	
	| EXPRESSION  PLUS EXPRESSION {$$ = $1 + $3;}
	| EXPRESSION  MINUS EXPRESSION {$$ = $1 - $3;}
	| EXPRESSION  MULTIPLY EXPRESSION {$$ = $1 * $3;}
	| EXPRESSION  DIVIDE EXPRESSION {$$ = $1 / $3;}
	| L_ROUND EXPRESSION R_ROUND { $$ = $2;}	
;

VARIABLE_TYPE:  INTEGER_TYPE
			  | DOUBLE_TYPE
;

VARIABLE_EVAL:	VARIABLE_ID
			|	VARIABLE_ID TILDA VARIABLE_TYPE
;

ACCESS_MODIFIER:  GLOBAL_MODIFIER
				| /* epsilon */
;			

DECLARATION:  ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID L_ANGLE VARIABLE_TYPE			
			| ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID PIPE VARIABLE_TYPE			
;

VARIABLE_ASSIGNMENT: VARIABLE_ID ASSIGNMENT EXPRESSION
;

READ_VARIABLE: READ VARIABLE_ID
;

PRINT_VARIABLE: PRINT VARIABLE_ID
;

%%

int main() {
	yyparse();    
}

int yyerror(const char* s) {
	cout << "Line: " <<poz[0]<<" Col: "<<poz[1]<<" Len: "<<poz[2] << endl;
	cout<< s<<endl;
}
