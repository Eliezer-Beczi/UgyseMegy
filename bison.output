Terminals unused in grammar

   L_CURLY
   R_CURLY
   NOT
   ELSE
   INT
   FLOAT
   DOUBLE
   STR


Grammar

    0 $accept: START $end

    1 START: PROG
    2      | %empty

    3 PROG: COMMAND END
    4     | PROG COMMAND END
    5     | IFBLOCK
    6     | WHILEBLOCK
    7     | PROG IFBLOCK
    8     | PROG WHILEBLOCK
    9     | error

   10 COMMAND: EXPRESSION
   11        | DECLARATION
   12        | VARIABLE_ASSIGNMENT
   13        | READ_VARIABLE
   14        | PRINT_VARIABLE

   15 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG R_ANGLE
   16        | IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG L_ANGLE R_ANGLE PROG R_ANGLE

   17 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG R_ANGLE

   18 EQUALITY: EXPRESSION EQUAL EXPRESSION

   19 NOTEQUALITY: EXPRESSION NOT_EQUAL EXPRESSION

   20 SMALLER: EXPRESSION L_ANGLE EXPRESSION

   21 BIGGER: EXPRESSION R_ANGLE EXPRESSION

   22 BOOLEXPRESSION: EQUALITY
   23               | NOTEQUALITY
   24               | SMALLER
   25               | BIGGER
   26               | BOOLEXPRESSION OR BOOLEXPRESSION
   27               | BOOLEXPRESSION AND BOOLEXPRESSION
   28               | L_ROUND BOOLEXPRESSION R_ROUND
   29               | error

   30 EXPRESSION: VARIABLE_EVAL
   31           | INTNUMBER
   32           | DOUBLENUMBER
   33           | EXPRESSION PLUS EXPRESSION
   34           | EXPRESSION MINUS EXPRESSION
   35           | EXPRESSION MULTIPLY EXPRESSION
   36           | EXPRESSION DIVIDE EXPRESSION
   37           | L_ROUND EXPRESSION R_ROUND

   38 VARIABLE_TYPE: INTEGER_TYPE
   39              | DOUBLE_TYPE

   40 VARIABLE_EVAL: VARIABLE_ID
   41              | VARIABLE_ID TILDA VARIABLE_TYPE

   42 ACCESS_MODIFIER: GLOBAL_MODIFIER
   43                | %empty

   44 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID L_ANGLE VARIABLE_TYPE
   45            | ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID PIPE VARIABLE_TYPE

   46 VARIABLE_ASSIGNMENT: VARIABLE_ID ASSIGNMENT EXPRESSION

   47 READ_VARIABLE: READ VARIABLE_ID

   48 PRINT_VARIABLE: PRINT VARIABLE_ID


Terminals, with rules where they appear

$end (0) 0
error (256) 9 29
INTNUMBER (258) 31
DOUBLENUMBER (259) 32
PLUS (260) 33
MINUS (261) 34
MULTIPLY (262) 35
DIVIDE (263) 36
ASSIGNMENT (264) 46
L_BOX (265) 15 16 17
R_BOX (266) 15 16 17
L_ROUND (267) 28 37
R_ROUND (268) 28 37
L_CURLY (269)
R_CURLY (270)
L_ANGLE (271) 15 16 17 20 44
R_ANGLE (272) 15 16 17 21
EQUAL (273) 18
NOT_EQUAL (274) 19
AND (275) 27
OR (276) 26
NOT (277)
END (278) 3 4
READ (279) 47
PRINT (280) 48
IF (281) 15 16
ELSE (282)
WHILE (283) 17
INTEGER_TYPE (284) 38
DOUBLE_TYPE (285) 39
VARIABLE_ID (286) 40 41 44 45 46 47 48
GLOBAL_MODIFIER (287) 42
PIPE (288) 45
DOUBLECOMMA (289) 44 45
TILDA (290) 41
INT (291)
FLOAT (292)
DOUBLE (293)
STR (294)


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
START (41)
    on left: 1 2, on right: 0
PROG (42)
    on left: 3 4 5 6 7 8 9, on right: 1 4 7 8 15 16 17
COMMAND (43)
    on left: 10 11 12 13 14, on right: 3 4
IFBLOCK (44)
    on left: 15 16, on right: 5 7
WHILEBLOCK (45)
    on left: 17, on right: 6 8
EQUALITY (46)
    on left: 18, on right: 22
NOTEQUALITY (47)
    on left: 19, on right: 23
SMALLER (48)
    on left: 20, on right: 24
BIGGER (49)
    on left: 21, on right: 25
BOOLEXPRESSION (50)
    on left: 22 23 24 25 26 27 28 29, on right: 15 16 17 26 27 28
EXPRESSION (51)
    on left: 30 31 32 33 34 35 36 37, on right: 10 18 19 20 21 33 34
    35 36 37 46
VARIABLE_TYPE (52)
    on left: 38 39, on right: 41 44 45
VARIABLE_EVAL (53)
    on left: 40 41, on right: 30
ACCESS_MODIFIER (54)
    on left: 42 43, on right: 44 45
DECLARATION (55)
    on left: 44 45, on right: 11
VARIABLE_ASSIGNMENT (56)
    on left: 46, on right: 12
READ_VARIABLE (57)
    on left: 47, on right: 13
PRINT_VARIABLE (58)
    on left: 48, on right: 14


State 0

    0 $accept: . START $end

    error            shift, and go to state 1
    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    L_ROUND          shift, and go to state 4
    READ             shift, and go to state 5
    PRINT            shift, and go to state 6
    IF               shift, and go to state 7
    WHILE            shift, and go to state 8
    VARIABLE_ID      shift, and go to state 9
    GLOBAL_MODIFIER  shift, and go to state 10

    $end         reduce using rule 2 (START)
    DOUBLECOMMA  reduce using rule 43 (ACCESS_MODIFIER)

    START                go to state 11
    PROG                 go to state 12
    COMMAND              go to state 13
    IFBLOCK              go to state 14
    WHILEBLOCK           go to state 15
    EXPRESSION           go to state 16
    VARIABLE_EVAL        go to state 17
    ACCESS_MODIFIER      go to state 18
    DECLARATION          go to state 19
    VARIABLE_ASSIGNMENT  go to state 20
    READ_VARIABLE        go to state 21
    PRINT_VARIABLE       go to state 22


State 1

    9 PROG: error .

    $default  reduce using rule 9 (PROG)


State 2

   31 EXPRESSION: INTNUMBER .

    $default  reduce using rule 31 (EXPRESSION)


State 3

   32 EXPRESSION: DOUBLENUMBER .

    $default  reduce using rule 32 (EXPRESSION)


State 4

   37 EXPRESSION: L_ROUND . EXPRESSION R_ROUND

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 4
    VARIABLE_ID   shift, and go to state 23

    EXPRESSION     go to state 24
    VARIABLE_EVAL  go to state 17


State 5

   47 READ_VARIABLE: READ . VARIABLE_ID

    VARIABLE_ID  shift, and go to state 25


State 6

   48 PRINT_VARIABLE: PRINT . VARIABLE_ID

    VARIABLE_ID  shift, and go to state 26


State 7

   15 IFBLOCK: IF . L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG R_ANGLE
   16        | IF . L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG L_ANGLE R_ANGLE PROG R_ANGLE

    L_BOX  shift, and go to state 27


State 8

   17 WHILEBLOCK: WHILE . L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG R_ANGLE

    L_BOX  shift, and go to state 28


State 9

   40 VARIABLE_EVAL: VARIABLE_ID .
   41              | VARIABLE_ID . TILDA VARIABLE_TYPE
   46 VARIABLE_ASSIGNMENT: VARIABLE_ID . ASSIGNMENT EXPRESSION

    ASSIGNMENT  shift, and go to state 29
    TILDA       shift, and go to state 30

    $default  reduce using rule 40 (VARIABLE_EVAL)


State 10

   42 ACCESS_MODIFIER: GLOBAL_MODIFIER .

    $default  reduce using rule 42 (ACCESS_MODIFIER)


State 11

    0 $accept: START . $end

    $end  shift, and go to state 31


State 12

    1 START: PROG .
    4 PROG: PROG . COMMAND END
    7     | PROG . IFBLOCK
    8     | PROG . WHILEBLOCK

    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    L_ROUND          shift, and go to state 4
    READ             shift, and go to state 5
    PRINT            shift, and go to state 6
    IF               shift, and go to state 7
    WHILE            shift, and go to state 8
    VARIABLE_ID      shift, and go to state 9
    GLOBAL_MODIFIER  shift, and go to state 10

    DOUBLECOMMA  reduce using rule 43 (ACCESS_MODIFIER)
    $default     reduce using rule 1 (START)

    COMMAND              go to state 32
    IFBLOCK              go to state 33
    WHILEBLOCK           go to state 34
    EXPRESSION           go to state 16
    VARIABLE_EVAL        go to state 17
    ACCESS_MODIFIER      go to state 18
    DECLARATION          go to state 19
    VARIABLE_ASSIGNMENT  go to state 20
    READ_VARIABLE        go to state 21
    PRINT_VARIABLE       go to state 22


State 13

    3 PROG: COMMAND . END

    END  shift, and go to state 35


State 14

    5 PROG: IFBLOCK .

    $default  reduce using rule 5 (PROG)


State 15

    6 PROG: WHILEBLOCK .

    $default  reduce using rule 6 (PROG)


State 16

   10 COMMAND: EXPRESSION .
   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION

    PLUS      shift, and go to state 36
    MINUS     shift, and go to state 37
    MULTIPLY  shift, and go to state 38
    DIVIDE    shift, and go to state 39

    $default  reduce using rule 10 (COMMAND)


State 17

   30 EXPRESSION: VARIABLE_EVAL .

    $default  reduce using rule 30 (EXPRESSION)


State 18

   44 DECLARATION: ACCESS_MODIFIER . DOUBLECOMMA VARIABLE_ID L_ANGLE VARIABLE_TYPE
   45            | ACCESS_MODIFIER . DOUBLECOMMA VARIABLE_ID PIPE VARIABLE_TYPE

    DOUBLECOMMA  shift, and go to state 40


State 19

   11 COMMAND: DECLARATION .

    $default  reduce using rule 11 (COMMAND)


State 20

   12 COMMAND: VARIABLE_ASSIGNMENT .

    $default  reduce using rule 12 (COMMAND)


State 21

   13 COMMAND: READ_VARIABLE .

    $default  reduce using rule 13 (COMMAND)


State 22

   14 COMMAND: PRINT_VARIABLE .

    $default  reduce using rule 14 (COMMAND)


State 23

   40 VARIABLE_EVAL: VARIABLE_ID .
   41              | VARIABLE_ID . TILDA VARIABLE_TYPE

    TILDA  shift, and go to state 30

    $default  reduce using rule 40 (VARIABLE_EVAL)


State 24

   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION
   37           | L_ROUND EXPRESSION . R_ROUND

    PLUS      shift, and go to state 36
    MINUS     shift, and go to state 37
    MULTIPLY  shift, and go to state 38
    DIVIDE    shift, and go to state 39
    R_ROUND   shift, and go to state 41


State 25

   47 READ_VARIABLE: READ VARIABLE_ID .

    $default  reduce using rule 47 (READ_VARIABLE)


State 26

   48 PRINT_VARIABLE: PRINT VARIABLE_ID .

    $default  reduce using rule 48 (PRINT_VARIABLE)


State 27

   15 IFBLOCK: IF L_BOX . BOOLEXPRESSION R_BOX L_ANGLE PROG R_ANGLE
   16        | IF L_BOX . BOOLEXPRESSION R_BOX L_ANGLE PROG L_ANGLE R_ANGLE PROG R_ANGLE

    error         shift, and go to state 42
    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 43
    VARIABLE_ID   shift, and go to state 23

    EQUALITY        go to state 44
    NOTEQUALITY     go to state 45
    SMALLER         go to state 46
    BIGGER          go to state 47
    BOOLEXPRESSION  go to state 48
    EXPRESSION      go to state 49
    VARIABLE_EVAL   go to state 17


State 28

   17 WHILEBLOCK: WHILE L_BOX . BOOLEXPRESSION R_BOX L_ANGLE PROG R_ANGLE

    error         shift, and go to state 42
    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 43
    VARIABLE_ID   shift, and go to state 23

    EQUALITY        go to state 44
    NOTEQUALITY     go to state 45
    SMALLER         go to state 46
    BIGGER          go to state 47
    BOOLEXPRESSION  go to state 50
    EXPRESSION      go to state 49
    VARIABLE_EVAL   go to state 17


State 29

   46 VARIABLE_ASSIGNMENT: VARIABLE_ID ASSIGNMENT . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 4
    VARIABLE_ID   shift, and go to state 23

    EXPRESSION     go to state 51
    VARIABLE_EVAL  go to state 17


State 30

   41 VARIABLE_EVAL: VARIABLE_ID TILDA . VARIABLE_TYPE

    INTEGER_TYPE  shift, and go to state 52
    DOUBLE_TYPE   shift, and go to state 53

    VARIABLE_TYPE  go to state 54


State 31

    0 $accept: START $end .

    $default  accept


State 32

    4 PROG: PROG COMMAND . END

    END  shift, and go to state 55


State 33

    7 PROG: PROG IFBLOCK .

    $default  reduce using rule 7 (PROG)


State 34

    8 PROG: PROG WHILEBLOCK .

    $default  reduce using rule 8 (PROG)


State 35

    3 PROG: COMMAND END .

    $default  reduce using rule 3 (PROG)


State 36

   33 EXPRESSION: EXPRESSION PLUS . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 4
    VARIABLE_ID   shift, and go to state 23

    EXPRESSION     go to state 56
    VARIABLE_EVAL  go to state 17


State 37

   34 EXPRESSION: EXPRESSION MINUS . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 4
    VARIABLE_ID   shift, and go to state 23

    EXPRESSION     go to state 57
    VARIABLE_EVAL  go to state 17


State 38

   35 EXPRESSION: EXPRESSION MULTIPLY . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 4
    VARIABLE_ID   shift, and go to state 23

    EXPRESSION     go to state 58
    VARIABLE_EVAL  go to state 17


State 39

   36 EXPRESSION: EXPRESSION DIVIDE . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 4
    VARIABLE_ID   shift, and go to state 23

    EXPRESSION     go to state 59
    VARIABLE_EVAL  go to state 17


State 40

   44 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA . VARIABLE_ID L_ANGLE VARIABLE_TYPE
   45            | ACCESS_MODIFIER DOUBLECOMMA . VARIABLE_ID PIPE VARIABLE_TYPE

    VARIABLE_ID  shift, and go to state 60


State 41

   37 EXPRESSION: L_ROUND EXPRESSION R_ROUND .

    $default  reduce using rule 37 (EXPRESSION)


State 42

   29 BOOLEXPRESSION: error .

    $default  reduce using rule 29 (BOOLEXPRESSION)


State 43

   28 BOOLEXPRESSION: L_ROUND . BOOLEXPRESSION R_ROUND
   37 EXPRESSION: L_ROUND . EXPRESSION R_ROUND

    error         shift, and go to state 42
    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 43
    VARIABLE_ID   shift, and go to state 23

    EQUALITY        go to state 44
    NOTEQUALITY     go to state 45
    SMALLER         go to state 46
    BIGGER          go to state 47
    BOOLEXPRESSION  go to state 61
    EXPRESSION      go to state 62
    VARIABLE_EVAL   go to state 17


State 44

   22 BOOLEXPRESSION: EQUALITY .

    $default  reduce using rule 22 (BOOLEXPRESSION)


State 45

   23 BOOLEXPRESSION: NOTEQUALITY .

    $default  reduce using rule 23 (BOOLEXPRESSION)


State 46

   24 BOOLEXPRESSION: SMALLER .

    $default  reduce using rule 24 (BOOLEXPRESSION)


State 47

   25 BOOLEXPRESSION: BIGGER .

    $default  reduce using rule 25 (BOOLEXPRESSION)


State 48

   15 IFBLOCK: IF L_BOX BOOLEXPRESSION . R_BOX L_ANGLE PROG R_ANGLE
   16        | IF L_BOX BOOLEXPRESSION . R_BOX L_ANGLE PROG L_ANGLE R_ANGLE PROG R_ANGLE
   26 BOOLEXPRESSION: BOOLEXPRESSION . OR BOOLEXPRESSION
   27               | BOOLEXPRESSION . AND BOOLEXPRESSION

    R_BOX  shift, and go to state 63
    AND    shift, and go to state 64
    OR     shift, and go to state 65


State 49

   18 EQUALITY: EXPRESSION . EQUAL EXPRESSION
   19 NOTEQUALITY: EXPRESSION . NOT_EQUAL EXPRESSION
   20 SMALLER: EXPRESSION . L_ANGLE EXPRESSION
   21 BIGGER: EXPRESSION . R_ANGLE EXPRESSION
   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION

    PLUS       shift, and go to state 36
    MINUS      shift, and go to state 37
    MULTIPLY   shift, and go to state 38
    DIVIDE     shift, and go to state 39
    L_ANGLE    shift, and go to state 66
    R_ANGLE    shift, and go to state 67
    EQUAL      shift, and go to state 68
    NOT_EQUAL  shift, and go to state 69


State 50

   17 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION . R_BOX L_ANGLE PROG R_ANGLE
   26 BOOLEXPRESSION: BOOLEXPRESSION . OR BOOLEXPRESSION
   27               | BOOLEXPRESSION . AND BOOLEXPRESSION

    R_BOX  shift, and go to state 70
    AND    shift, and go to state 64
    OR     shift, and go to state 65


State 51

   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION
   46 VARIABLE_ASSIGNMENT: VARIABLE_ID ASSIGNMENT EXPRESSION .

    PLUS      shift, and go to state 36
    MINUS     shift, and go to state 37
    MULTIPLY  shift, and go to state 38
    DIVIDE    shift, and go to state 39

    $default  reduce using rule 46 (VARIABLE_ASSIGNMENT)


State 52

   38 VARIABLE_TYPE: INTEGER_TYPE .

    $default  reduce using rule 38 (VARIABLE_TYPE)


State 53

   39 VARIABLE_TYPE: DOUBLE_TYPE .

    $default  reduce using rule 39 (VARIABLE_TYPE)


State 54

   41 VARIABLE_EVAL: VARIABLE_ID TILDA VARIABLE_TYPE .

    $default  reduce using rule 41 (VARIABLE_EVAL)


State 55

    4 PROG: PROG COMMAND END .

    $default  reduce using rule 4 (PROG)


State 56

   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   33           | EXPRESSION PLUS EXPRESSION .
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION

    MULTIPLY  shift, and go to state 38
    DIVIDE    shift, and go to state 39

    $default  reduce using rule 33 (EXPRESSION)


State 57

   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   34           | EXPRESSION MINUS EXPRESSION .
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION

    MULTIPLY  shift, and go to state 38
    DIVIDE    shift, and go to state 39

    $default  reduce using rule 34 (EXPRESSION)


State 58

   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   35           | EXPRESSION MULTIPLY EXPRESSION .
   36           | EXPRESSION . DIVIDE EXPRESSION

    $default  reduce using rule 35 (EXPRESSION)


State 59

   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION
   36           | EXPRESSION DIVIDE EXPRESSION .

    $default  reduce using rule 36 (EXPRESSION)


State 60

   44 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID . L_ANGLE VARIABLE_TYPE
   45            | ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID . PIPE VARIABLE_TYPE

    L_ANGLE  shift, and go to state 71
    PIPE     shift, and go to state 72


State 61

   26 BOOLEXPRESSION: BOOLEXPRESSION . OR BOOLEXPRESSION
   27               | BOOLEXPRESSION . AND BOOLEXPRESSION
   28               | L_ROUND BOOLEXPRESSION . R_ROUND

    R_ROUND  shift, and go to state 73
    AND      shift, and go to state 64
    OR       shift, and go to state 65


State 62

   18 EQUALITY: EXPRESSION . EQUAL EXPRESSION
   19 NOTEQUALITY: EXPRESSION . NOT_EQUAL EXPRESSION
   20 SMALLER: EXPRESSION . L_ANGLE EXPRESSION
   21 BIGGER: EXPRESSION . R_ANGLE EXPRESSION
   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION
   37           | L_ROUND EXPRESSION . R_ROUND

    PLUS       shift, and go to state 36
    MINUS      shift, and go to state 37
    MULTIPLY   shift, and go to state 38
    DIVIDE     shift, and go to state 39
    R_ROUND    shift, and go to state 41
    L_ANGLE    shift, and go to state 66
    R_ANGLE    shift, and go to state 67
    EQUAL      shift, and go to state 68
    NOT_EQUAL  shift, and go to state 69


State 63

   15 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX . L_ANGLE PROG R_ANGLE
   16        | IF L_BOX BOOLEXPRESSION R_BOX . L_ANGLE PROG L_ANGLE R_ANGLE PROG R_ANGLE

    L_ANGLE  shift, and go to state 74


State 64

   27 BOOLEXPRESSION: BOOLEXPRESSION AND . BOOLEXPRESSION

    error         shift, and go to state 42
    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 43
    VARIABLE_ID   shift, and go to state 23

    EQUALITY        go to state 44
    NOTEQUALITY     go to state 45
    SMALLER         go to state 46
    BIGGER          go to state 47
    BOOLEXPRESSION  go to state 75
    EXPRESSION      go to state 49
    VARIABLE_EVAL   go to state 17


State 65

   26 BOOLEXPRESSION: BOOLEXPRESSION OR . BOOLEXPRESSION

    error         shift, and go to state 42
    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 43
    VARIABLE_ID   shift, and go to state 23

    EQUALITY        go to state 44
    NOTEQUALITY     go to state 45
    SMALLER         go to state 46
    BIGGER          go to state 47
    BOOLEXPRESSION  go to state 76
    EXPRESSION      go to state 49
    VARIABLE_EVAL   go to state 17


State 66

   20 SMALLER: EXPRESSION L_ANGLE . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 4
    VARIABLE_ID   shift, and go to state 23

    EXPRESSION     go to state 77
    VARIABLE_EVAL  go to state 17


State 67

   21 BIGGER: EXPRESSION R_ANGLE . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 4
    VARIABLE_ID   shift, and go to state 23

    EXPRESSION     go to state 78
    VARIABLE_EVAL  go to state 17


State 68

   18 EQUALITY: EXPRESSION EQUAL . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 4
    VARIABLE_ID   shift, and go to state 23

    EXPRESSION     go to state 79
    VARIABLE_EVAL  go to state 17


State 69

   19 NOTEQUALITY: EXPRESSION NOT_EQUAL . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    L_ROUND       shift, and go to state 4
    VARIABLE_ID   shift, and go to state 23

    EXPRESSION     go to state 80
    VARIABLE_EVAL  go to state 17


State 70

   17 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX . L_ANGLE PROG R_ANGLE

    L_ANGLE  shift, and go to state 81


State 71

   44 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID L_ANGLE . VARIABLE_TYPE

    INTEGER_TYPE  shift, and go to state 52
    DOUBLE_TYPE   shift, and go to state 53

    VARIABLE_TYPE  go to state 82


State 72

   45 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID PIPE . VARIABLE_TYPE

    INTEGER_TYPE  shift, and go to state 52
    DOUBLE_TYPE   shift, and go to state 53

    VARIABLE_TYPE  go to state 83


State 73

   28 BOOLEXPRESSION: L_ROUND BOOLEXPRESSION R_ROUND .

    $default  reduce using rule 28 (BOOLEXPRESSION)


State 74

   15 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE . PROG R_ANGLE
   16        | IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE . PROG L_ANGLE R_ANGLE PROG R_ANGLE

    error            shift, and go to state 1
    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    L_ROUND          shift, and go to state 4
    READ             shift, and go to state 5
    PRINT            shift, and go to state 6
    IF               shift, and go to state 7
    WHILE            shift, and go to state 8
    VARIABLE_ID      shift, and go to state 9
    GLOBAL_MODIFIER  shift, and go to state 10

    DOUBLECOMMA  reduce using rule 43 (ACCESS_MODIFIER)

    PROG                 go to state 84
    COMMAND              go to state 13
    IFBLOCK              go to state 14
    WHILEBLOCK           go to state 15
    EXPRESSION           go to state 16
    VARIABLE_EVAL        go to state 17
    ACCESS_MODIFIER      go to state 18
    DECLARATION          go to state 19
    VARIABLE_ASSIGNMENT  go to state 20
    READ_VARIABLE        go to state 21
    PRINT_VARIABLE       go to state 22


State 75

   26 BOOLEXPRESSION: BOOLEXPRESSION . OR BOOLEXPRESSION
   27               | BOOLEXPRESSION . AND BOOLEXPRESSION
   27               | BOOLEXPRESSION AND BOOLEXPRESSION .

    $default  reduce using rule 27 (BOOLEXPRESSION)


State 76

   26 BOOLEXPRESSION: BOOLEXPRESSION . OR BOOLEXPRESSION
   26               | BOOLEXPRESSION OR BOOLEXPRESSION .
   27               | BOOLEXPRESSION . AND BOOLEXPRESSION

    $default  reduce using rule 26 (BOOLEXPRESSION)


State 77

   20 SMALLER: EXPRESSION L_ANGLE EXPRESSION .
   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION

    PLUS      shift, and go to state 36
    MINUS     shift, and go to state 37
    MULTIPLY  shift, and go to state 38
    DIVIDE    shift, and go to state 39

    $default  reduce using rule 20 (SMALLER)


State 78

   21 BIGGER: EXPRESSION R_ANGLE EXPRESSION .
   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION

    PLUS      shift, and go to state 36
    MINUS     shift, and go to state 37
    MULTIPLY  shift, and go to state 38
    DIVIDE    shift, and go to state 39

    $default  reduce using rule 21 (BIGGER)


State 79

   18 EQUALITY: EXPRESSION EQUAL EXPRESSION .
   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION

    PLUS      shift, and go to state 36
    MINUS     shift, and go to state 37
    MULTIPLY  shift, and go to state 38
    DIVIDE    shift, and go to state 39

    $default  reduce using rule 18 (EQUALITY)


State 80

   19 NOTEQUALITY: EXPRESSION NOT_EQUAL EXPRESSION .
   33 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   34           | EXPRESSION . MINUS EXPRESSION
   35           | EXPRESSION . MULTIPLY EXPRESSION
   36           | EXPRESSION . DIVIDE EXPRESSION

    PLUS      shift, and go to state 36
    MINUS     shift, and go to state 37
    MULTIPLY  shift, and go to state 38
    DIVIDE    shift, and go to state 39

    $default  reduce using rule 19 (NOTEQUALITY)


State 81

   17 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX L_ANGLE . PROG R_ANGLE

    error            shift, and go to state 1
    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    L_ROUND          shift, and go to state 4
    READ             shift, and go to state 5
    PRINT            shift, and go to state 6
    IF               shift, and go to state 7
    WHILE            shift, and go to state 8
    VARIABLE_ID      shift, and go to state 9
    GLOBAL_MODIFIER  shift, and go to state 10

    DOUBLECOMMA  reduce using rule 43 (ACCESS_MODIFIER)

    PROG                 go to state 85
    COMMAND              go to state 13
    IFBLOCK              go to state 14
    WHILEBLOCK           go to state 15
    EXPRESSION           go to state 16
    VARIABLE_EVAL        go to state 17
    ACCESS_MODIFIER      go to state 18
    DECLARATION          go to state 19
    VARIABLE_ASSIGNMENT  go to state 20
    READ_VARIABLE        go to state 21
    PRINT_VARIABLE       go to state 22


State 82

   44 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID L_ANGLE VARIABLE_TYPE .

    $default  reduce using rule 44 (DECLARATION)


State 83

   45 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID PIPE VARIABLE_TYPE .

    $default  reduce using rule 45 (DECLARATION)


State 84

    4 PROG: PROG . COMMAND END
    7     | PROG . IFBLOCK
    8     | PROG . WHILEBLOCK
   15 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG . R_ANGLE
   16        | IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG . L_ANGLE R_ANGLE PROG R_ANGLE

    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    L_ROUND          shift, and go to state 4
    L_ANGLE          shift, and go to state 86
    R_ANGLE          shift, and go to state 87
    READ             shift, and go to state 5
    PRINT            shift, and go to state 6
    IF               shift, and go to state 7
    WHILE            shift, and go to state 8
    VARIABLE_ID      shift, and go to state 9
    GLOBAL_MODIFIER  shift, and go to state 10

    $default  reduce using rule 43 (ACCESS_MODIFIER)

    COMMAND              go to state 32
    IFBLOCK              go to state 33
    WHILEBLOCK           go to state 34
    EXPRESSION           go to state 16
    VARIABLE_EVAL        go to state 17
    ACCESS_MODIFIER      go to state 18
    DECLARATION          go to state 19
    VARIABLE_ASSIGNMENT  go to state 20
    READ_VARIABLE        go to state 21
    PRINT_VARIABLE       go to state 22


State 85

    4 PROG: PROG . COMMAND END
    7     | PROG . IFBLOCK
    8     | PROG . WHILEBLOCK
   17 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG . R_ANGLE

    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    L_ROUND          shift, and go to state 4
    R_ANGLE          shift, and go to state 88
    READ             shift, and go to state 5
    PRINT            shift, and go to state 6
    IF               shift, and go to state 7
    WHILE            shift, and go to state 8
    VARIABLE_ID      shift, and go to state 9
    GLOBAL_MODIFIER  shift, and go to state 10

    $default  reduce using rule 43 (ACCESS_MODIFIER)

    COMMAND              go to state 32
    IFBLOCK              go to state 33
    WHILEBLOCK           go to state 34
    EXPRESSION           go to state 16
    VARIABLE_EVAL        go to state 17
    ACCESS_MODIFIER      go to state 18
    DECLARATION          go to state 19
    VARIABLE_ASSIGNMENT  go to state 20
    READ_VARIABLE        go to state 21
    PRINT_VARIABLE       go to state 22


State 86

   16 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG L_ANGLE . R_ANGLE PROG R_ANGLE

    R_ANGLE  shift, and go to state 89


State 87

   15 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG R_ANGLE .

    $default  reduce using rule 15 (IFBLOCK)


State 88

   17 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG R_ANGLE .

    $default  reduce using rule 17 (WHILEBLOCK)


State 89

   16 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG L_ANGLE R_ANGLE . PROG R_ANGLE

    error            shift, and go to state 1
    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    L_ROUND          shift, and go to state 4
    READ             shift, and go to state 5
    PRINT            shift, and go to state 6
    IF               shift, and go to state 7
    WHILE            shift, and go to state 8
    VARIABLE_ID      shift, and go to state 9
    GLOBAL_MODIFIER  shift, and go to state 10

    DOUBLECOMMA  reduce using rule 43 (ACCESS_MODIFIER)

    PROG                 go to state 90
    COMMAND              go to state 13
    IFBLOCK              go to state 14
    WHILEBLOCK           go to state 15
    EXPRESSION           go to state 16
    VARIABLE_EVAL        go to state 17
    ACCESS_MODIFIER      go to state 18
    DECLARATION          go to state 19
    VARIABLE_ASSIGNMENT  go to state 20
    READ_VARIABLE        go to state 21
    PRINT_VARIABLE       go to state 22


State 90

    4 PROG: PROG . COMMAND END
    7     | PROG . IFBLOCK
    8     | PROG . WHILEBLOCK
   16 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG L_ANGLE R_ANGLE PROG . R_ANGLE

    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    L_ROUND          shift, and go to state 4
    R_ANGLE          shift, and go to state 91
    READ             shift, and go to state 5
    PRINT            shift, and go to state 6
    IF               shift, and go to state 7
    WHILE            shift, and go to state 8
    VARIABLE_ID      shift, and go to state 9
    GLOBAL_MODIFIER  shift, and go to state 10

    $default  reduce using rule 43 (ACCESS_MODIFIER)

    COMMAND              go to state 32
    IFBLOCK              go to state 33
    WHILEBLOCK           go to state 34
    EXPRESSION           go to state 16
    VARIABLE_EVAL        go to state 17
    ACCESS_MODIFIER      go to state 18
    DECLARATION          go to state 19
    VARIABLE_ASSIGNMENT  go to state 20
    READ_VARIABLE        go to state 21
    PRINT_VARIABLE       go to state 22


State 91

   16 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX L_ANGLE PROG L_ANGLE R_ANGLE PROG R_ANGLE .

    $default  reduce using rule 16 (IFBLOCK)
