Terminals unused in grammar

   STR
   L_CURLY
   R_CURLY
   ELSE


Grammar

    0 $accept: START $end

    1 START: PROG
    2      | %empty

    3 PROG: COMMAND END
    4     | PROG COMMAND END
    5     | IFBLOCK
    6     | WHILEBLOCK
    7     | PROG IFBLOCK
    8     | PROG WHILEBLOCK
    9     | error

   10 COMMAND: EXPRESSION
   11        | DECLARATION
   12        | VARIABLE_ASSIGNMENT
   13        | READ_VARIABLE
   14        | PRINT_VARIABLE

   15 push: %empty

   16 pop: %empty

   17 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG R_ANGLE pop
   18        | IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG L_ANGLE pop push R_ANGLE PROG R_ANGLE pop

   19 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX L_ANGLE push PROG pop R_ANGLE

   20 EQUALITY: EXPRESSION EQUAL EXPRESSION

   21 NOTEQUALITY: EXPRESSION NOT_EQUAL EXPRESSION

   22 SMALLER: EXPRESSION L_ANGLE EXPRESSION

   23 BIGGER: EXPRESSION R_ANGLE EXPRESSION

   24 BOOLEXPRESSION: EQUALITY
   25               | NOTEQUALITY
   26               | SMALLER
   27               | BIGGER
   28               | BOOLEXPRESSION OR BOOLEXPRESSION
   29               | BOOLEXPRESSION AND BOOLEXPRESSION
   30               | L_ROUND BOOLEXPRESSION R_ROUND
   31               | NOT L_ROUND BOOLEXPRESSION R_ROUND
   32               | error

   33 EXPRESSION: VARIABLE_EVAL
   34           | INTNUMBER
   35           | DOUBLENUMBER
   36           | EXPRESSION PLUS EXPRESSION
   37           | EXPRESSION MINUS EXPRESSION
   38           | EXPRESSION MULTIPLY EXPRESSION
   39           | EXPRESSION DIVIDE EXPRESSION
   40           | PLUS EXPRESSION
   41           | MINUS EXPRESSION
   42           | L_ROUND EXPRESSION R_ROUND

   43 VARIABLE_TYPE: INTEGER_TYPE
   44              | DOUBLE_TYPE

   45 VARIABLE_EVAL: VARIABLE_ID
   46              | VARIABLE_ID TILDA VARIABLE_TYPE

   47 ACCESS_MODIFIER: GLOBAL_MODIFIER
   48                | %empty

   49 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID L_ANGLE VARIABLE_TYPE
   50            | ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID PIPE VARIABLE_TYPE

   51 VARIABLE_ASSIGNMENT: VARIABLE_ID ASSIGNMENT EXPRESSION

   52 READ_VARIABLE: READ VARIABLE_ID

   53 PRINT_VARIABLE: PRINT VARIABLE_ID


Terminals, with rules where they appear

$end (0) 0
error (256) 9 32
INTNUMBER (258) 34
DOUBLENUMBER (259) 35
STR (260)
PLUS (261) 36 40
MINUS (262) 37 41
MULTIPLY (263) 38
DIVIDE (264) 39
ASSIGNMENT (265) 51
L_BOX (266) 17 18 19
R_BOX (267) 17 18 19
L_ROUND (268) 30 31 42
R_ROUND (269) 30 31 42
L_CURLY (270)
R_CURLY (271)
L_ANGLE (272) 17 18 19 22 49
R_ANGLE (273) 17 18 19 23
EQUAL (274) 20
NOT_EQUAL (275) 21
AND (276) 29
OR (277) 28
NOT (278) 31
END (279) 3 4
READ (280) 52
PRINT (281) 53
IF (282) 17 18
ELSE (283)
WHILE (284) 19
INTEGER_TYPE (285) 43
DOUBLE_TYPE (286) 44
VARIABLE_ID (287) 45 46 49 50 51 52 53
GLOBAL_MODIFIER (288) 47
PIPE (289) 50
DOUBLECOMMA (290) 49 50
TILDA (291) 46


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
START (38)
    on left: 1 2, on right: 0
PROG (39)
    on left: 3 4 5 6 7 8 9, on right: 1 4 7 8 17 18 19
COMMAND (40)
    on left: 10 11 12 13 14, on right: 3 4
push (41)
    on left: 15, on right: 17 18 19
pop (42)
    on left: 16, on right: 17 18 19
IFBLOCK (43)
    on left: 17 18, on right: 5 7
WHILEBLOCK (44)
    on left: 19, on right: 6 8
EQUALITY (45)
    on left: 20, on right: 24
NOTEQUALITY (46)
    on left: 21, on right: 25
SMALLER (47)
    on left: 22, on right: 26
BIGGER (48)
    on left: 23, on right: 27
BOOLEXPRESSION (49)
    on left: 24 25 26 27 28 29 30 31 32, on right: 17 18 19 28 29 30
    31
EXPRESSION (50)
    on left: 33 34 35 36 37 38 39 40 41 42, on right: 10 20 21 22 23
    36 37 38 39 40 41 42 51
VARIABLE_TYPE (51)
    on left: 43 44, on right: 46 49 50
VARIABLE_EVAL (52)
    on left: 45 46, on right: 33
ACCESS_MODIFIER (53)
    on left: 47 48, on right: 49 50
DECLARATION (54)
    on left: 49 50, on right: 11
VARIABLE_ASSIGNMENT (55)
    on left: 51, on right: 12
READ_VARIABLE (56)
    on left: 52, on right: 13
PRINT_VARIABLE (57)
    on left: 53, on right: 14


State 0

    0 $accept: . START $end

    error            shift, and go to state 1
    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    PLUS             shift, and go to state 4
    MINUS            shift, and go to state 5
    L_ROUND          shift, and go to state 6
    READ             shift, and go to state 7
    PRINT            shift, and go to state 8
    IF               shift, and go to state 9
    WHILE            shift, and go to state 10
    VARIABLE_ID      shift, and go to state 11
    GLOBAL_MODIFIER  shift, and go to state 12

    $end         reduce using rule 2 (START)
    DOUBLECOMMA  reduce using rule 48 (ACCESS_MODIFIER)

    START                go to state 13
    PROG                 go to state 14
    COMMAND              go to state 15
    IFBLOCK              go to state 16
    WHILEBLOCK           go to state 17
    EXPRESSION           go to state 18
    VARIABLE_EVAL        go to state 19
    ACCESS_MODIFIER      go to state 20
    DECLARATION          go to state 21
    VARIABLE_ASSIGNMENT  go to state 22
    READ_VARIABLE        go to state 23
    PRINT_VARIABLE       go to state 24


State 1

    9 PROG: error .

    $default  reduce using rule 9 (PROG)


State 2

   34 EXPRESSION: INTNUMBER .

    $default  reduce using rule 34 (EXPRESSION)


State 3

   35 EXPRESSION: DOUBLENUMBER .

    $default  reduce using rule 35 (EXPRESSION)


State 4

   40 EXPRESSION: PLUS . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 26
    VARIABLE_EVAL  go to state 19


State 5

   41 EXPRESSION: MINUS . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 27
    VARIABLE_EVAL  go to state 19


State 6

   42 EXPRESSION: L_ROUND . EXPRESSION R_ROUND

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 28
    VARIABLE_EVAL  go to state 19


State 7

   52 READ_VARIABLE: READ . VARIABLE_ID

    VARIABLE_ID  shift, and go to state 29


State 8

   53 PRINT_VARIABLE: PRINT . VARIABLE_ID

    VARIABLE_ID  shift, and go to state 30


State 9

   17 IFBLOCK: IF . L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG R_ANGLE pop
   18        | IF . L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG L_ANGLE pop push R_ANGLE PROG R_ANGLE pop

    L_BOX  shift, and go to state 31


State 10

   19 WHILEBLOCK: WHILE . L_BOX BOOLEXPRESSION R_BOX L_ANGLE push PROG pop R_ANGLE

    L_BOX  shift, and go to state 32


State 11

   45 VARIABLE_EVAL: VARIABLE_ID .
   46              | VARIABLE_ID . TILDA VARIABLE_TYPE
   51 VARIABLE_ASSIGNMENT: VARIABLE_ID . ASSIGNMENT EXPRESSION

    ASSIGNMENT  shift, and go to state 33
    TILDA       shift, and go to state 34

    $default  reduce using rule 45 (VARIABLE_EVAL)


State 12

   47 ACCESS_MODIFIER: GLOBAL_MODIFIER .

    $default  reduce using rule 47 (ACCESS_MODIFIER)


State 13

    0 $accept: START . $end

    $end  shift, and go to state 35


State 14

    1 START: PROG .
    4 PROG: PROG . COMMAND END
    7     | PROG . IFBLOCK
    8     | PROG . WHILEBLOCK

    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    PLUS             shift, and go to state 4
    MINUS            shift, and go to state 5
    L_ROUND          shift, and go to state 6
    READ             shift, and go to state 7
    PRINT            shift, and go to state 8
    IF               shift, and go to state 9
    WHILE            shift, and go to state 10
    VARIABLE_ID      shift, and go to state 11
    GLOBAL_MODIFIER  shift, and go to state 12

    DOUBLECOMMA  reduce using rule 48 (ACCESS_MODIFIER)
    $default     reduce using rule 1 (START)

    COMMAND              go to state 36
    IFBLOCK              go to state 37
    WHILEBLOCK           go to state 38
    EXPRESSION           go to state 18
    VARIABLE_EVAL        go to state 19
    ACCESS_MODIFIER      go to state 20
    DECLARATION          go to state 21
    VARIABLE_ASSIGNMENT  go to state 22
    READ_VARIABLE        go to state 23
    PRINT_VARIABLE       go to state 24


State 15

    3 PROG: COMMAND . END

    END  shift, and go to state 39


State 16

    5 PROG: IFBLOCK .

    $default  reduce using rule 5 (PROG)


State 17

    6 PROG: WHILEBLOCK .

    $default  reduce using rule 6 (PROG)


State 18

   10 COMMAND: EXPRESSION .
   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION

    PLUS      shift, and go to state 40
    MINUS     shift, and go to state 41
    MULTIPLY  shift, and go to state 42
    DIVIDE    shift, and go to state 43

    $default  reduce using rule 10 (COMMAND)


State 19

   33 EXPRESSION: VARIABLE_EVAL .

    $default  reduce using rule 33 (EXPRESSION)


State 20

   49 DECLARATION: ACCESS_MODIFIER . DOUBLECOMMA VARIABLE_ID L_ANGLE VARIABLE_TYPE
   50            | ACCESS_MODIFIER . DOUBLECOMMA VARIABLE_ID PIPE VARIABLE_TYPE

    DOUBLECOMMA  shift, and go to state 44


State 21

   11 COMMAND: DECLARATION .

    $default  reduce using rule 11 (COMMAND)


State 22

   12 COMMAND: VARIABLE_ASSIGNMENT .

    $default  reduce using rule 12 (COMMAND)


State 23

   13 COMMAND: READ_VARIABLE .

    $default  reduce using rule 13 (COMMAND)


State 24

   14 COMMAND: PRINT_VARIABLE .

    $default  reduce using rule 14 (COMMAND)


State 25

   45 VARIABLE_EVAL: VARIABLE_ID .
   46              | VARIABLE_ID . TILDA VARIABLE_TYPE

    TILDA  shift, and go to state 34

    $default  reduce using rule 45 (VARIABLE_EVAL)


State 26

   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION
   40           | PLUS EXPRESSION .

    MULTIPLY  shift, and go to state 42
    DIVIDE    shift, and go to state 43

    $default  reduce using rule 40 (EXPRESSION)


State 27

   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION
   41           | MINUS EXPRESSION .

    MULTIPLY  shift, and go to state 42
    DIVIDE    shift, and go to state 43

    $default  reduce using rule 41 (EXPRESSION)


State 28

   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION
   42           | L_ROUND EXPRESSION . R_ROUND

    PLUS      shift, and go to state 40
    MINUS     shift, and go to state 41
    MULTIPLY  shift, and go to state 42
    DIVIDE    shift, and go to state 43
    R_ROUND   shift, and go to state 45


State 29

   52 READ_VARIABLE: READ VARIABLE_ID .

    $default  reduce using rule 52 (READ_VARIABLE)


State 30

   53 PRINT_VARIABLE: PRINT VARIABLE_ID .

    $default  reduce using rule 53 (PRINT_VARIABLE)


State 31

   17 IFBLOCK: IF L_BOX . BOOLEXPRESSION R_BOX push L_ANGLE PROG R_ANGLE pop
   18        | IF L_BOX . BOOLEXPRESSION R_BOX push L_ANGLE PROG L_ANGLE pop push R_ANGLE PROG R_ANGLE pop

    error         shift, and go to state 46
    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 47
    NOT           shift, and go to state 48
    VARIABLE_ID   shift, and go to state 25

    EQUALITY        go to state 49
    NOTEQUALITY     go to state 50
    SMALLER         go to state 51
    BIGGER          go to state 52
    BOOLEXPRESSION  go to state 53
    EXPRESSION      go to state 54
    VARIABLE_EVAL   go to state 19


State 32

   19 WHILEBLOCK: WHILE L_BOX . BOOLEXPRESSION R_BOX L_ANGLE push PROG pop R_ANGLE

    error         shift, and go to state 46
    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 47
    NOT           shift, and go to state 48
    VARIABLE_ID   shift, and go to state 25

    EQUALITY        go to state 49
    NOTEQUALITY     go to state 50
    SMALLER         go to state 51
    BIGGER          go to state 52
    BOOLEXPRESSION  go to state 55
    EXPRESSION      go to state 54
    VARIABLE_EVAL   go to state 19


State 33

   51 VARIABLE_ASSIGNMENT: VARIABLE_ID ASSIGNMENT . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 56
    VARIABLE_EVAL  go to state 19


State 34

   46 VARIABLE_EVAL: VARIABLE_ID TILDA . VARIABLE_TYPE

    INTEGER_TYPE  shift, and go to state 57
    DOUBLE_TYPE   shift, and go to state 58

    VARIABLE_TYPE  go to state 59


State 35

    0 $accept: START $end .

    $default  accept


State 36

    4 PROG: PROG COMMAND . END

    END  shift, and go to state 60


State 37

    7 PROG: PROG IFBLOCK .

    $default  reduce using rule 7 (PROG)


State 38

    8 PROG: PROG WHILEBLOCK .

    $default  reduce using rule 8 (PROG)


State 39

    3 PROG: COMMAND END .

    $default  reduce using rule 3 (PROG)


State 40

   36 EXPRESSION: EXPRESSION PLUS . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 61
    VARIABLE_EVAL  go to state 19


State 41

   37 EXPRESSION: EXPRESSION MINUS . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 62
    VARIABLE_EVAL  go to state 19


State 42

   38 EXPRESSION: EXPRESSION MULTIPLY . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 63
    VARIABLE_EVAL  go to state 19


State 43

   39 EXPRESSION: EXPRESSION DIVIDE . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 64
    VARIABLE_EVAL  go to state 19


State 44

   49 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA . VARIABLE_ID L_ANGLE VARIABLE_TYPE
   50            | ACCESS_MODIFIER DOUBLECOMMA . VARIABLE_ID PIPE VARIABLE_TYPE

    VARIABLE_ID  shift, and go to state 65


State 45

   42 EXPRESSION: L_ROUND EXPRESSION R_ROUND .

    $default  reduce using rule 42 (EXPRESSION)


State 46

   32 BOOLEXPRESSION: error .

    $default  reduce using rule 32 (BOOLEXPRESSION)


State 47

   30 BOOLEXPRESSION: L_ROUND . BOOLEXPRESSION R_ROUND
   42 EXPRESSION: L_ROUND . EXPRESSION R_ROUND

    error         shift, and go to state 46
    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 47
    NOT           shift, and go to state 48
    VARIABLE_ID   shift, and go to state 25

    EQUALITY        go to state 49
    NOTEQUALITY     go to state 50
    SMALLER         go to state 51
    BIGGER          go to state 52
    BOOLEXPRESSION  go to state 66
    EXPRESSION      go to state 67
    VARIABLE_EVAL   go to state 19


State 48

   31 BOOLEXPRESSION: NOT . L_ROUND BOOLEXPRESSION R_ROUND

    L_ROUND  shift, and go to state 68


State 49

   24 BOOLEXPRESSION: EQUALITY .

    $default  reduce using rule 24 (BOOLEXPRESSION)


State 50

   25 BOOLEXPRESSION: NOTEQUALITY .

    $default  reduce using rule 25 (BOOLEXPRESSION)


State 51

   26 BOOLEXPRESSION: SMALLER .

    $default  reduce using rule 26 (BOOLEXPRESSION)


State 52

   27 BOOLEXPRESSION: BIGGER .

    $default  reduce using rule 27 (BOOLEXPRESSION)


State 53

   17 IFBLOCK: IF L_BOX BOOLEXPRESSION . R_BOX push L_ANGLE PROG R_ANGLE pop
   18        | IF L_BOX BOOLEXPRESSION . R_BOX push L_ANGLE PROG L_ANGLE pop push R_ANGLE PROG R_ANGLE pop
   28 BOOLEXPRESSION: BOOLEXPRESSION . OR BOOLEXPRESSION
   29               | BOOLEXPRESSION . AND BOOLEXPRESSION

    R_BOX  shift, and go to state 69
    AND    shift, and go to state 70
    OR     shift, and go to state 71


State 54

   20 EQUALITY: EXPRESSION . EQUAL EXPRESSION
   21 NOTEQUALITY: EXPRESSION . NOT_EQUAL EXPRESSION
   22 SMALLER: EXPRESSION . L_ANGLE EXPRESSION
   23 BIGGER: EXPRESSION . R_ANGLE EXPRESSION
   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION

    PLUS       shift, and go to state 40
    MINUS      shift, and go to state 41
    MULTIPLY   shift, and go to state 42
    DIVIDE     shift, and go to state 43
    L_ANGLE    shift, and go to state 72
    R_ANGLE    shift, and go to state 73
    EQUAL      shift, and go to state 74
    NOT_EQUAL  shift, and go to state 75


State 55

   19 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION . R_BOX L_ANGLE push PROG pop R_ANGLE
   28 BOOLEXPRESSION: BOOLEXPRESSION . OR BOOLEXPRESSION
   29               | BOOLEXPRESSION . AND BOOLEXPRESSION

    R_BOX  shift, and go to state 76
    AND    shift, and go to state 70
    OR     shift, and go to state 71


State 56

   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION
   51 VARIABLE_ASSIGNMENT: VARIABLE_ID ASSIGNMENT EXPRESSION .

    PLUS      shift, and go to state 40
    MINUS     shift, and go to state 41
    MULTIPLY  shift, and go to state 42
    DIVIDE    shift, and go to state 43

    $default  reduce using rule 51 (VARIABLE_ASSIGNMENT)


State 57

   43 VARIABLE_TYPE: INTEGER_TYPE .

    $default  reduce using rule 43 (VARIABLE_TYPE)


State 58

   44 VARIABLE_TYPE: DOUBLE_TYPE .

    $default  reduce using rule 44 (VARIABLE_TYPE)


State 59

   46 VARIABLE_EVAL: VARIABLE_ID TILDA VARIABLE_TYPE .

    $default  reduce using rule 46 (VARIABLE_EVAL)


State 60

    4 PROG: PROG COMMAND END .

    $default  reduce using rule 4 (PROG)


State 61

   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   36           | EXPRESSION PLUS EXPRESSION .
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION

    MULTIPLY  shift, and go to state 42
    DIVIDE    shift, and go to state 43

    $default  reduce using rule 36 (EXPRESSION)


State 62

   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   37           | EXPRESSION MINUS EXPRESSION .
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION

    MULTIPLY  shift, and go to state 42
    DIVIDE    shift, and go to state 43

    $default  reduce using rule 37 (EXPRESSION)


State 63

   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   38           | EXPRESSION MULTIPLY EXPRESSION .
   39           | EXPRESSION . DIVIDE EXPRESSION

    $default  reduce using rule 38 (EXPRESSION)


State 64

   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION
   39           | EXPRESSION DIVIDE EXPRESSION .

    $default  reduce using rule 39 (EXPRESSION)


State 65

   49 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID . L_ANGLE VARIABLE_TYPE
   50            | ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID . PIPE VARIABLE_TYPE

    L_ANGLE  shift, and go to state 77
    PIPE     shift, and go to state 78


State 66

   28 BOOLEXPRESSION: BOOLEXPRESSION . OR BOOLEXPRESSION
   29               | BOOLEXPRESSION . AND BOOLEXPRESSION
   30               | L_ROUND BOOLEXPRESSION . R_ROUND

    R_ROUND  shift, and go to state 79
    AND      shift, and go to state 70
    OR       shift, and go to state 71


State 67

   20 EQUALITY: EXPRESSION . EQUAL EXPRESSION
   21 NOTEQUALITY: EXPRESSION . NOT_EQUAL EXPRESSION
   22 SMALLER: EXPRESSION . L_ANGLE EXPRESSION
   23 BIGGER: EXPRESSION . R_ANGLE EXPRESSION
   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION
   42           | L_ROUND EXPRESSION . R_ROUND

    PLUS       shift, and go to state 40
    MINUS      shift, and go to state 41
    MULTIPLY   shift, and go to state 42
    DIVIDE     shift, and go to state 43
    R_ROUND    shift, and go to state 45
    L_ANGLE    shift, and go to state 72
    R_ANGLE    shift, and go to state 73
    EQUAL      shift, and go to state 74
    NOT_EQUAL  shift, and go to state 75


State 68

   31 BOOLEXPRESSION: NOT L_ROUND . BOOLEXPRESSION R_ROUND

    error         shift, and go to state 46
    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 47
    NOT           shift, and go to state 48
    VARIABLE_ID   shift, and go to state 25

    EQUALITY        go to state 49
    NOTEQUALITY     go to state 50
    SMALLER         go to state 51
    BIGGER          go to state 52
    BOOLEXPRESSION  go to state 80
    EXPRESSION      go to state 54
    VARIABLE_EVAL   go to state 19


State 69

   17 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX . push L_ANGLE PROG R_ANGLE pop
   18        | IF L_BOX BOOLEXPRESSION R_BOX . push L_ANGLE PROG L_ANGLE pop push R_ANGLE PROG R_ANGLE pop

    $default  reduce using rule 15 (push)

    push  go to state 81


State 70

   29 BOOLEXPRESSION: BOOLEXPRESSION AND . BOOLEXPRESSION

    error         shift, and go to state 46
    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 47
    NOT           shift, and go to state 48
    VARIABLE_ID   shift, and go to state 25

    EQUALITY        go to state 49
    NOTEQUALITY     go to state 50
    SMALLER         go to state 51
    BIGGER          go to state 52
    BOOLEXPRESSION  go to state 82
    EXPRESSION      go to state 54
    VARIABLE_EVAL   go to state 19


State 71

   28 BOOLEXPRESSION: BOOLEXPRESSION OR . BOOLEXPRESSION

    error         shift, and go to state 46
    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 47
    NOT           shift, and go to state 48
    VARIABLE_ID   shift, and go to state 25

    EQUALITY        go to state 49
    NOTEQUALITY     go to state 50
    SMALLER         go to state 51
    BIGGER          go to state 52
    BOOLEXPRESSION  go to state 83
    EXPRESSION      go to state 54
    VARIABLE_EVAL   go to state 19


State 72

   22 SMALLER: EXPRESSION L_ANGLE . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 84
    VARIABLE_EVAL  go to state 19


State 73

   23 BIGGER: EXPRESSION R_ANGLE . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 85
    VARIABLE_EVAL  go to state 19


State 74

   20 EQUALITY: EXPRESSION EQUAL . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 86
    VARIABLE_EVAL  go to state 19


State 75

   21 NOTEQUALITY: EXPRESSION NOT_EQUAL . EXPRESSION

    INTNUMBER     shift, and go to state 2
    DOUBLENUMBER  shift, and go to state 3
    PLUS          shift, and go to state 4
    MINUS         shift, and go to state 5
    L_ROUND       shift, and go to state 6
    VARIABLE_ID   shift, and go to state 25

    EXPRESSION     go to state 87
    VARIABLE_EVAL  go to state 19


State 76

   19 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX . L_ANGLE push PROG pop R_ANGLE

    L_ANGLE  shift, and go to state 88


State 77

   49 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID L_ANGLE . VARIABLE_TYPE

    INTEGER_TYPE  shift, and go to state 57
    DOUBLE_TYPE   shift, and go to state 58

    VARIABLE_TYPE  go to state 89


State 78

   50 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID PIPE . VARIABLE_TYPE

    INTEGER_TYPE  shift, and go to state 57
    DOUBLE_TYPE   shift, and go to state 58

    VARIABLE_TYPE  go to state 90


State 79

   30 BOOLEXPRESSION: L_ROUND BOOLEXPRESSION R_ROUND .

    $default  reduce using rule 30 (BOOLEXPRESSION)


State 80

   28 BOOLEXPRESSION: BOOLEXPRESSION . OR BOOLEXPRESSION
   29               | BOOLEXPRESSION . AND BOOLEXPRESSION
   31               | NOT L_ROUND BOOLEXPRESSION . R_ROUND

    R_ROUND  shift, and go to state 91
    AND      shift, and go to state 70
    OR       shift, and go to state 71


State 81

   17 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push . L_ANGLE PROG R_ANGLE pop
   18        | IF L_BOX BOOLEXPRESSION R_BOX push . L_ANGLE PROG L_ANGLE pop push R_ANGLE PROG R_ANGLE pop

    L_ANGLE  shift, and go to state 92


State 82

   28 BOOLEXPRESSION: BOOLEXPRESSION . OR BOOLEXPRESSION
   29               | BOOLEXPRESSION . AND BOOLEXPRESSION
   29               | BOOLEXPRESSION AND BOOLEXPRESSION .

    $default  reduce using rule 29 (BOOLEXPRESSION)


State 83

   28 BOOLEXPRESSION: BOOLEXPRESSION . OR BOOLEXPRESSION
   28               | BOOLEXPRESSION OR BOOLEXPRESSION .
   29               | BOOLEXPRESSION . AND BOOLEXPRESSION

    $default  reduce using rule 28 (BOOLEXPRESSION)


State 84

   22 SMALLER: EXPRESSION L_ANGLE EXPRESSION .
   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION

    PLUS      shift, and go to state 40
    MINUS     shift, and go to state 41
    MULTIPLY  shift, and go to state 42
    DIVIDE    shift, and go to state 43

    $default  reduce using rule 22 (SMALLER)


State 85

   23 BIGGER: EXPRESSION R_ANGLE EXPRESSION .
   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION

    PLUS      shift, and go to state 40
    MINUS     shift, and go to state 41
    MULTIPLY  shift, and go to state 42
    DIVIDE    shift, and go to state 43

    $default  reduce using rule 23 (BIGGER)


State 86

   20 EQUALITY: EXPRESSION EQUAL EXPRESSION .
   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION

    PLUS      shift, and go to state 40
    MINUS     shift, and go to state 41
    MULTIPLY  shift, and go to state 42
    DIVIDE    shift, and go to state 43

    $default  reduce using rule 20 (EQUALITY)


State 87

   21 NOTEQUALITY: EXPRESSION NOT_EQUAL EXPRESSION .
   36 EXPRESSION: EXPRESSION . PLUS EXPRESSION
   37           | EXPRESSION . MINUS EXPRESSION
   38           | EXPRESSION . MULTIPLY EXPRESSION
   39           | EXPRESSION . DIVIDE EXPRESSION

    PLUS      shift, and go to state 40
    MINUS     shift, and go to state 41
    MULTIPLY  shift, and go to state 42
    DIVIDE    shift, and go to state 43

    $default  reduce using rule 21 (NOTEQUALITY)


State 88

   19 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX L_ANGLE . push PROG pop R_ANGLE

    $default  reduce using rule 15 (push)

    push  go to state 93


State 89

   49 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID L_ANGLE VARIABLE_TYPE .

    $default  reduce using rule 49 (DECLARATION)


State 90

   50 DECLARATION: ACCESS_MODIFIER DOUBLECOMMA VARIABLE_ID PIPE VARIABLE_TYPE .

    $default  reduce using rule 50 (DECLARATION)


State 91

   31 BOOLEXPRESSION: NOT L_ROUND BOOLEXPRESSION R_ROUND .

    $default  reduce using rule 31 (BOOLEXPRESSION)


State 92

   17 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE . PROG R_ANGLE pop
   18        | IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE . PROG L_ANGLE pop push R_ANGLE PROG R_ANGLE pop

    error            shift, and go to state 1
    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    PLUS             shift, and go to state 4
    MINUS            shift, and go to state 5
    L_ROUND          shift, and go to state 6
    READ             shift, and go to state 7
    PRINT            shift, and go to state 8
    IF               shift, and go to state 9
    WHILE            shift, and go to state 10
    VARIABLE_ID      shift, and go to state 11
    GLOBAL_MODIFIER  shift, and go to state 12

    DOUBLECOMMA  reduce using rule 48 (ACCESS_MODIFIER)

    PROG                 go to state 94
    COMMAND              go to state 15
    IFBLOCK              go to state 16
    WHILEBLOCK           go to state 17
    EXPRESSION           go to state 18
    VARIABLE_EVAL        go to state 19
    ACCESS_MODIFIER      go to state 20
    DECLARATION          go to state 21
    VARIABLE_ASSIGNMENT  go to state 22
    READ_VARIABLE        go to state 23
    PRINT_VARIABLE       go to state 24


State 93

   19 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX L_ANGLE push . PROG pop R_ANGLE

    error            shift, and go to state 1
    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    PLUS             shift, and go to state 4
    MINUS            shift, and go to state 5
    L_ROUND          shift, and go to state 6
    READ             shift, and go to state 7
    PRINT            shift, and go to state 8
    IF               shift, and go to state 9
    WHILE            shift, and go to state 10
    VARIABLE_ID      shift, and go to state 11
    GLOBAL_MODIFIER  shift, and go to state 12

    DOUBLECOMMA  reduce using rule 48 (ACCESS_MODIFIER)

    PROG                 go to state 95
    COMMAND              go to state 15
    IFBLOCK              go to state 16
    WHILEBLOCK           go to state 17
    EXPRESSION           go to state 18
    VARIABLE_EVAL        go to state 19
    ACCESS_MODIFIER      go to state 20
    DECLARATION          go to state 21
    VARIABLE_ASSIGNMENT  go to state 22
    READ_VARIABLE        go to state 23
    PRINT_VARIABLE       go to state 24


State 94

    4 PROG: PROG . COMMAND END
    7     | PROG . IFBLOCK
    8     | PROG . WHILEBLOCK
   17 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG . R_ANGLE pop
   18        | IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG . L_ANGLE pop push R_ANGLE PROG R_ANGLE pop

    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    PLUS             shift, and go to state 4
    MINUS            shift, and go to state 5
    L_ROUND          shift, and go to state 6
    L_ANGLE          shift, and go to state 96
    R_ANGLE          shift, and go to state 97
    READ             shift, and go to state 7
    PRINT            shift, and go to state 8
    IF               shift, and go to state 9
    WHILE            shift, and go to state 10
    VARIABLE_ID      shift, and go to state 11
    GLOBAL_MODIFIER  shift, and go to state 12

    $default  reduce using rule 48 (ACCESS_MODIFIER)

    COMMAND              go to state 36
    IFBLOCK              go to state 37
    WHILEBLOCK           go to state 38
    EXPRESSION           go to state 18
    VARIABLE_EVAL        go to state 19
    ACCESS_MODIFIER      go to state 20
    DECLARATION          go to state 21
    VARIABLE_ASSIGNMENT  go to state 22
    READ_VARIABLE        go to state 23
    PRINT_VARIABLE       go to state 24


State 95

    4 PROG: PROG . COMMAND END
    7     | PROG . IFBLOCK
    8     | PROG . WHILEBLOCK
   19 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX L_ANGLE push PROG . pop R_ANGLE

    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    PLUS             shift, and go to state 4
    MINUS            shift, and go to state 5
    L_ROUND          shift, and go to state 6
    READ             shift, and go to state 7
    PRINT            shift, and go to state 8
    IF               shift, and go to state 9
    WHILE            shift, and go to state 10
    VARIABLE_ID      shift, and go to state 11
    GLOBAL_MODIFIER  shift, and go to state 12

    DOUBLECOMMA  reduce using rule 48 (ACCESS_MODIFIER)
    $default     reduce using rule 16 (pop)

    COMMAND              go to state 36
    pop                  go to state 98
    IFBLOCK              go to state 37
    WHILEBLOCK           go to state 38
    EXPRESSION           go to state 18
    VARIABLE_EVAL        go to state 19
    ACCESS_MODIFIER      go to state 20
    DECLARATION          go to state 21
    VARIABLE_ASSIGNMENT  go to state 22
    READ_VARIABLE        go to state 23
    PRINT_VARIABLE       go to state 24


State 96

   18 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG L_ANGLE . pop push R_ANGLE PROG R_ANGLE pop

    $default  reduce using rule 16 (pop)

    pop  go to state 99


State 97

   17 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG R_ANGLE . pop

    $default  reduce using rule 16 (pop)

    pop  go to state 100


State 98

   19 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX L_ANGLE push PROG pop . R_ANGLE

    R_ANGLE  shift, and go to state 101


State 99

   18 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG L_ANGLE pop . push R_ANGLE PROG R_ANGLE pop

    $default  reduce using rule 15 (push)

    push  go to state 102


State 100

   17 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG R_ANGLE pop .

    $default  reduce using rule 17 (IFBLOCK)


State 101

   19 WHILEBLOCK: WHILE L_BOX BOOLEXPRESSION R_BOX L_ANGLE push PROG pop R_ANGLE .

    $default  reduce using rule 19 (WHILEBLOCK)


State 102

   18 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG L_ANGLE pop push . R_ANGLE PROG R_ANGLE pop

    R_ANGLE  shift, and go to state 103


State 103

   18 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG L_ANGLE pop push R_ANGLE . PROG R_ANGLE pop

    error            shift, and go to state 1
    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    PLUS             shift, and go to state 4
    MINUS            shift, and go to state 5
    L_ROUND          shift, and go to state 6
    READ             shift, and go to state 7
    PRINT            shift, and go to state 8
    IF               shift, and go to state 9
    WHILE            shift, and go to state 10
    VARIABLE_ID      shift, and go to state 11
    GLOBAL_MODIFIER  shift, and go to state 12

    DOUBLECOMMA  reduce using rule 48 (ACCESS_MODIFIER)

    PROG                 go to state 104
    COMMAND              go to state 15
    IFBLOCK              go to state 16
    WHILEBLOCK           go to state 17
    EXPRESSION           go to state 18
    VARIABLE_EVAL        go to state 19
    ACCESS_MODIFIER      go to state 20
    DECLARATION          go to state 21
    VARIABLE_ASSIGNMENT  go to state 22
    READ_VARIABLE        go to state 23
    PRINT_VARIABLE       go to state 24


State 104

    4 PROG: PROG . COMMAND END
    7     | PROG . IFBLOCK
    8     | PROG . WHILEBLOCK
   18 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG L_ANGLE pop push R_ANGLE PROG . R_ANGLE pop

    INTNUMBER        shift, and go to state 2
    DOUBLENUMBER     shift, and go to state 3
    PLUS             shift, and go to state 4
    MINUS            shift, and go to state 5
    L_ROUND          shift, and go to state 6
    R_ANGLE          shift, and go to state 105
    READ             shift, and go to state 7
    PRINT            shift, and go to state 8
    IF               shift, and go to state 9
    WHILE            shift, and go to state 10
    VARIABLE_ID      shift, and go to state 11
    GLOBAL_MODIFIER  shift, and go to state 12

    $default  reduce using rule 48 (ACCESS_MODIFIER)

    COMMAND              go to state 36
    IFBLOCK              go to state 37
    WHILEBLOCK           go to state 38
    EXPRESSION           go to state 18
    VARIABLE_EVAL        go to state 19
    ACCESS_MODIFIER      go to state 20
    DECLARATION          go to state 21
    VARIABLE_ASSIGNMENT  go to state 22
    READ_VARIABLE        go to state 23
    PRINT_VARIABLE       go to state 24


State 105

   18 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG L_ANGLE pop push R_ANGLE PROG R_ANGLE . pop

    $default  reduce using rule 16 (pop)

    pop  go to state 106


State 106

   18 IFBLOCK: IF L_BOX BOOLEXPRESSION R_BOX push L_ANGLE PROG L_ANGLE pop push R_ANGLE PROG R_ANGLE pop .

    $default  reduce using rule 18 (IFBLOCK)
